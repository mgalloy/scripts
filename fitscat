#!/usr/bin/env python

import argparse
import base64

from astropy.io import fits
import numpy as np
from PIL import Image
import StringIO


def none_filter(x):
    return x


def sqrt_filter(x):
    return np.sqrt(x)


def log_filter(x):
    return np.log1p(x)


def byte_scale(data, min=None, max=None, debug=False):
    '''Convert an arbitrary n-dimensional array into a unsigned byte valued
       array'''

    dims = data.shape

    if debug:
        print('%s %d x %d'% (data.dtype, dims[0], dims[1]))

    # determine min/max values to use
    min_value = float(min) if min is not None else data.min()
    max_value = float(max) if max is not None else data.max()

    if debug:
        print('min=%f, max=%f' % (min_value, max_value))

    # scale
    new_data = 255.0 * (data.astype(float) - min_value) / (max_value - min_value)

    return new_data.astype(np.ubyte)


def print_osc():
    pass


def display_image(data, debug=False):
    dims = data.shape
    im = Image.fromarray(data)
    output = StringIO.StringIO()
    im.save(output, 'PNG')
    print('\x1b]1337;File=inline=1;width=%dpx;height=%dpx:%s\a' % (dims[0], dims[1], base64.b64encode(output.getvalue())))


def main():
    name = 'fitscat'
    description = 'a FITS query/display program'
    parser = argparse.ArgumentParser(description='%s - %s' % (name, description))

    parser.add_argument('filename', help='FITS file to query')
    parser.add_argument('--min', type=float, default=None, help='min for scaling')
    parser.add_argument('--max', type=float, default=None, help='max for scaling')
    parser.add_argument('--debug', action='store_true', help='set to debug')
    parser.add_argument('-d', '--display', action='store_true', help='set to display')
    parser.add_argument('-l', '--list', action='store_true', help='set to list HDUs')
    parser.add_argument('-r', '--header', action='store_true', help='set to display header')
    parser.add_argument('-e', '--exten_no', type=int, default=0, help='specify extension')
    parser.add_argument('-f', '--filter', type=str, default='none', help='specify filter (default: none)')

    args = parser.parse_args()

    filters = {'none': none_filter, 'sqrt': sqrt_filter, 'log': log_filter}

    with fits.open(args.filename) as f:
        if args.list or (not args.header and not args.display):
            f.info()

        if args.header:
            header = f[args.exten_no].header
            print(repr(header))

        if args.display:
            data = f[args.exten_no].data
            ndims = len(data.shape)
            dims = data.shape

            if ndims == 3:
                data = data[0, : , :].reshape(dims[1], dims[2])
            if ndims == 4:
                data = data[0, 0, : , :].reshape(dims[2], dims[3])

            data = filters[args.filter](data)
            byte_data = byte_scale(data, min=args.min, max=args.max, debug=args.debug)
            display_image(byte_data, debug=args.debug)


if __name__ == '__main__':
    main()
